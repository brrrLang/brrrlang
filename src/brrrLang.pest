arrow = _{ "->" }
assign = _{ "=" }
semi_colon = _{ ";" }
lbrace = _{ "(" }
rbrace = _{ ")" }
lcbrace = _{ "{" }
rcbrace = _{ "}" }
comma = _{ "," }
pipe = _{ "|" }
colon = _{ ":" }
period = _{ "." }
underscore = _{ "_" }
scope_resolution = _{ "::" }

or = { "||" }
exclamation_mark = { "!" }
and = { "&&" }
plus = { "+" }
minus = { "-" }
eq = { "==" }
lt = { "<" }
gt = { ">" }
lteq = { lt ~ eq }
gteq = { gt ~ eq }

multi_use = {
    mu_root ~ lcbrace ~ mu_children? ~ rcbrace
}

mu_root = {
    identifier ~ scope_resolution
}

mu_children = {
    (identifier | multi_use) ~ (comma ~ (multi_use | identifier)) *
}

operator = {
      or
    | exclamation_mark
    | and
    | plus
    | minus
    | eq
    | lt
    | gt
    | gteq
    | lteq
}

new_kw = { "new" }
let_kw = { "let" }
return_kw = { "return" }
loop_kw = { "loop" }
if_kw = { "if" }
else_kw = { "else" }
pub_kw = { "pub" }
break_kw = { "break" }
continue_kw = { "continue" }
define_kw = { "define" }
struct_kw = { "struct" }

keyword = {
      new_kw
    | let_kw
    | break_kw
    | continue_kw
    | return_kw
    | loop_kw
    | if_kw
    | else_kw
    | pub_kw
    | define_kw
    | struct_kw
}

program = _{ SOI ~ (fun_named | element | tag | struct_def)* ~ EOI }

tag = {"@" ~ ident ~ (multi_use | term)? ~ semi_colon}

fun_named = {
    pub_kw ? ~ ident ~ fun
}

fun = {
    type_annotation ? ~ lbrace ~ (param ~ (comma ~ param) * ) ? ~ rbrace ~ arrow ~ lcbrace ~
     (stmt ~ semi_colon) * ~ rcbrace
}

stmt = _{
      assignment
    | return_
    | new_var
    | continue_kw
    | break_kw
    | expr
}

return_ = { return_kw ~ (expr)? }

expression = {
      term
}

expr = {
        function_calls
      | (!function_call ~ expression)
      | method_calls
      | new_obj
}

function_calls = {
    function_call ~ ( period ~ function_call ) *
}

method_calls = {
    method_call ~ ( period ~ function_call ) *
}

method_call = {
    ((new_obj | identifier | function_call) ~ period ~ function_call)
}

function_call = {
    identifier ~ (type_annotation)? ~ lbrace ~ (args)? ~ rbrace
}

new_obj = {
    new_kw ~ identifier ~ lbrace ~ (args)? ~ rbrace
}

args = {
    expr ~ ("," ~ expr) * ?
}

assignment = { (identifier | new_var) ~ assign ~ expr }

param = { ident ~ type_annotation }

type_annotation = {"<" ~ identifier ~ ">"}

new_var = { let_kw ~ ident ~ type_annotation? }

terms = { term+ }

term = _{ string | decimal | integer | identifier | "(" ~ expr ~ ")"  }

struct_def = {
    pub_kw ? ~ struct_kw ~ ident ~ lcbrace ~ (field | fun_named ) * ~ rcbrace
}


element = {
    ident ~ arrow ~ lcbrace ~ (prop | field | fun_named | define) * ~ rcbrace
}

field = {
    ident ~ type_annotation ~ semi_colon
}

prop = {
    ident ~ arrow ~ (term | (lcbrace ~ element ~ (comma ~ element) * ~ comma?  ~ rcbrace ))
}

define = {
    define_kw ~ ident ~ identifier ~ semi_colon
}

integer = @{ "_"? ~ ASCII_DIGIT+ }

decimal = @{ "_"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }

ident = @{ (!keyword ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*) | underscore }

identifier = @{ ident ~ (((scope_resolution | period) ~ ident)+)? }

string = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }

WHITESPACE = _{ " " | "\t" | "\n" }

COMMENT = _{ ("//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)*) }
